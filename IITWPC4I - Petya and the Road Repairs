#include <bits/stdc++.h>
#define Fast ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ll long long int
using namespace std;
const int N=1e5+10;
struct edge{
    int u, v, w;
    bool operator<(const edge& p) const{
        return w < p.w;
    }
};
int parent[N];
vector<edge> e;

int find(int r){
    while(parent[r]!=r){
        parent[r]=parent[parent[r]];
        r=parent[r];
    }
    return r;
}
void union_set(int u,int v){
    int x=find(u);
    int y=find(v);
    parent[x]=parent[y];
}

bool isConnected(int u,int v){
    return find(u)==find(v);
}

ll mst(int n){
    sort(e.begin(), e.end());
    for (int i = 0; i < N; i++){
        parent[i] = i;
    }
    ll sum=0LL;
    for (int i = 0; i < (int)e.size(); i++){
        int u = find(e[i].u);
        int v = find(e[i].v);
        if (u != v){
            parent[u] = v;
            //union_set(u,v);
            sum += e[i].w;
        }
    }
    for(int i=1;i<=n;i++){
        int x=find(i);
        int y=find(i-1);
        if(x!=y){
            return -1;
        }
    }
    return sum;
}

int main()
{
    int t;
    scanf("%d",&t);
    while(t--){
        e.clear();
        int n, m;
        scanf("%d%d",&n,&m);
        for(int i=0;i<n;i++){
            int x;
            scanf("%d",&x);
            if(x==1){
                edge get;
                get.u = 0;
                get.v = i+1;
                get.w = 0;
                e.push_back(get);
            }
        }
        for (int i = 1; i <= m; i++){
            int u, v, w;
            scanf("%d%d%d",&u,&v,&w);
            edge get;
            get.u = u;
            get.v = v;
            get.w = w;
            e.push_back(get);
        }
        ll Ans=mst(n);
        if(Ans==-1){
            printf("impossible\n");
        }
        else{
            printf("%lld\n",Ans);
        }
    }
}
