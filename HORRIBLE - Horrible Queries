    #include <bits/stdc++.h>
    using namespace std;
    #define mx 100001
    struct info
    {
        long long prop, sum;
    } tree[mx * 3]={0}; 
    void update(long long node, long long b, long long e, long long i, long long j, long long x)
    {
        if (i > e || j < b)
            return;
        if (b >= i && e <= j)
        {
            tree[node].sum += ((e - b + 1) * x); 
            tree[node].prop += x;
            return;
        }
        long long Left = node * 2;
        long long Right = (node * 2) + 1;
        long long mid = (b + e) / 2;
        update(Left, b, mid, i, j, x);
        update(Right, mid + 1, e, i, j, x);
        tree[node].sum = tree[Left].sum + tree[Right].sum + (e - b + 1) * tree[node].prop;
    }
    long long query(long long node, long long b, long long e, long long i, long long j, long long carry = 0LL)
    {
        if (i > e || j < b)
            return 0;
     
        if (b >= i and e <= j)
            return tree[node].sum + carry * (e - b + 1); 
     
        long long Left = node << 1;
        long long Right = (node << 1) + 1;
        long long mid = (b + e) >> 1;
     
        long long p1 = query(Left, b, mid, i, j, carry + tree[node].prop); 
        long long p2 = query(Right, mid + 1, e, i, j, carry + tree[node].prop);
     
        return p1 + p2;
    }
    int main()
    {
        long long t,ca=1;
        scanf("%lld",&t);
        while(t--)
        {
            long long n,q;
            scanf("%lld%lld",&n,&q);
            for(int i=0;i<q;i++){
                int qq;
                scanf("%d",&qq);
                if(qq==0)
                {
                    long long xx,yy,zz;
                    scanf("%lld%lld%lld",&xx,&yy,&zz);
                    xx;yy;
                    update(1, 1, n, xx, yy,zz);
                }
                else{
                    long long x1,y1;
                    scanf("%lld%lld",&x1,&y1);
                    x1;y1;
                    printf("%lld\n",query(1, 1, n, x1, y1));
                }
            }
            for(int i=0;i<mx*3;i++){
                tree[i].sum=0;
                tree[i].prop=0;
            }
        }
        return 0;
    }
     
